{"version":3,"sources":["components/keyboard.js","components/output.js","components/App.js","serviceWorker.js","index.js"],"names":["Keyboard","props","react_default","a","createElement","className","type","onClick","getValueBtn","value","Output","ishidden","equations","outputDisplay","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","calculate","result","state","join","math","eval","format","precision","String","setState","operations","handleClick","e","target","splice","length","sqrt","factorial","i","newOperations","update","$push","output","keyboard","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb10b962.chunk.js","sourcesContent":["import React from 'react'\nconst Keyboard = (props) => (\n    <div className=\"keyboard-container\">\n       <input type=\"button\" onClick={props.getValueBtn} className=\"special\" value=\"C\"/>\n       <input type=\"button\" onClick={props.getValueBtn} className=\"special\" value=\"*\"/>\n       <input type=\"button\" onClick={props.getValueBtn} className=\"special\" value=\"-\"/>\n       <input type=\"button\" onClick={props.getValueBtn} className=\"special\" value=\"+\"/>\n       <input type=\"button\" onClick={props.getValueBtn} className=\"special\" value=\"^\"/>\n       <input type=\"button\" onClick={props.getValueBtn} className=\"special\" value=\"/\"/>\n       <input type=\"button\" onClick={props.getValueBtn} className=\"special\" value=\"<\"/>\n       <input type=\"button\" onClick={props.getValueBtn} className=\"special\" value=\"sqr\"/>\n       <input type=\"button\" onClick={props.getValueBtn} className=\"special\" value=\"!x\"/>\n \n       <input type=\"button\" onClick={props.getValueBtn} value=\"7\"/>\n       \n       <input type=\"button\" onClick={props.getValueBtn} value=\"8\"/>\n       <input type=\"button\" onClick={props.getValueBtn} value=\"9\"/>\n       <input type=\"button\" onClick={props.getValueBtn} value=\"4\"/>\n       \n       <input type=\"button\" onClick={props.getValueBtn} value=\"5\"/>\n       <input type=\"button\" onClick={props.getValueBtn} value=\"6\"/>\n       <input type=\"button\" onClick={props.getValueBtn} value=\"1\"/>\n       \n       <input type=\"button\" onClick={props.getValueBtn} value=\"2\"/>\n       <input type=\"button\" onClick={props.getValueBtn} value=\"3\"/>\n       <input type=\"button\" onClick={props.getValueBtn} value=\"0\"/>\n       <input type=\"button\" onClick={props.getValueBtn} value=\".\"/>\n       <input type=\"button\" className=\"equalBtn\" onClick={props.getValueBtn} value=\"=\"/>\n\n    </div>\n);\nexport default Keyboard;","import React from 'react'\nconst Output = (props) => (\n    <div className={props.ishidden + \" output-container\"}>\n        <span className=\"equations\">{props.equations}</span>\n        <span className=\"output-string\">{props.outputDisplay}</span>\n        \n    </div>\n);\nexport default Output;","import React, { Component } from 'react';\nimport Keyboard from './keyboard'\nimport Output from './output'\nimport update from 'immutability-helper'\nimport math from 'mathjs'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      operations:[],\n      equations: [],\n      ishidden:''\n\n    }\n  }\n\n  calculate = () => {\n    let result = this.state.equations.join('')\n    if (result) {\n      result = math.eval(result)\n      result = math.format(result, {precision:14})\n      result = String(result)\n      this.setState({\n        operations: [result]\n      })\n\n    }\n  }\n\n  handleClick = (e) => {\n    const value = e.target.value\n    // alert(value)\n    switch (value) {\n      case 'C': \n      this.setState({\n        operations: [],\n        equations: [],\n        ishidden:'hide'\n      })\n      break\n      case '=': \n      this.calculate()\n      break\n      case '<': \n      this.setState ({\n        equations: this.state.equations.splice(0, this.state.equations.length-1)\n\n      })\n      break\n      case 'sqr': \n      this.setState ({\n        equations: math.sqrt(this.state.equations),\n        operations: math.sqrt(this.state.equations),\n        ishidden:'show'\n\n      })\n      break\n      case '!x':\n      let factorial = 1\n      for(let i = 1; i<= this.state.equations;i++) {\n        factorial = factorial * i\n      } \n      this.setState ({\n        equations: [factorial],\n        operations: [factorial],\n        ishidden:'show'\n\n      })\n      break\n      default:\n      let newOperations = update(this.state.equations,{\n        $push: [value]\n      })\n      this.setState({\n        equations: newOperations,\n        ishidden:'show'\n      })\n      break\n    }\n   \n  }\n  render() {\n    return (\n      <div className=\"app\">\n        <Output\n          outputDisplay={this.state.operations}\n          equations={this.state.equations}\n          ishidden = {this.state.ishidden}\n        />\n        <Keyboard\n          getValueBtn={this.handleClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}